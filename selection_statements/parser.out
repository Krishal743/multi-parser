Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> selection_statement
Rule 1     selection_statement -> IF LPAREN condition RPAREN statement ELSE statement
Rule 2     selection_statement -> IF LPAREN condition RPAREN statement
Rule 3     condition -> IDENTIFIER REL_OP IDENTIFIER
Rule 4     condition -> IDENTIFIER REL_OP NUMBER
Rule 5     statement -> IDENTIFIER EQUALS IDENTIFIER SEMICOLON

Terminals, with rules where they appear

ELSE                 : 1
EQUALS               : 5
IDENTIFIER           : 3 3 4 5 5
IF                   : 1 2
LPAREN               : 1 2
NUMBER               : 4
REL_OP               : 3 4
RPAREN               : 1 2
SEMICOLON            : 5
error                : 

Nonterminals, with rules where they appear

condition            : 1 2
selection_statement  : 0
statement            : 1 1 2

Parsing method: LALR

state 0

    (0) S' -> . selection_statement
    (1) selection_statement -> . IF LPAREN condition RPAREN statement ELSE statement
    (2) selection_statement -> . IF LPAREN condition RPAREN statement

    IF              shift and go to state 2

    selection_statement            shift and go to state 1

state 1

    (0) S' -> selection_statement .



state 2

    (1) selection_statement -> IF . LPAREN condition RPAREN statement ELSE statement
    (2) selection_statement -> IF . LPAREN condition RPAREN statement

    LPAREN          shift and go to state 3


state 3

    (1) selection_statement -> IF LPAREN . condition RPAREN statement ELSE statement
    (2) selection_statement -> IF LPAREN . condition RPAREN statement
    (3) condition -> . IDENTIFIER REL_OP IDENTIFIER
    (4) condition -> . IDENTIFIER REL_OP NUMBER

    IDENTIFIER      shift and go to state 5

    condition                      shift and go to state 4

state 4

    (1) selection_statement -> IF LPAREN condition . RPAREN statement ELSE statement
    (2) selection_statement -> IF LPAREN condition . RPAREN statement

    RPAREN          shift and go to state 6


state 5

    (3) condition -> IDENTIFIER . REL_OP IDENTIFIER
    (4) condition -> IDENTIFIER . REL_OP NUMBER

    REL_OP          shift and go to state 7


state 6

    (1) selection_statement -> IF LPAREN condition RPAREN . statement ELSE statement
    (2) selection_statement -> IF LPAREN condition RPAREN . statement
    (5) statement -> . IDENTIFIER EQUALS IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 9

    statement                      shift and go to state 8

state 7

    (3) condition -> IDENTIFIER REL_OP . IDENTIFIER
    (4) condition -> IDENTIFIER REL_OP . NUMBER

    IDENTIFIER      shift and go to state 10
    NUMBER          shift and go to state 11


state 8

    (1) selection_statement -> IF LPAREN condition RPAREN statement . ELSE statement
    (2) selection_statement -> IF LPAREN condition RPAREN statement .

    ELSE            shift and go to state 12
    $end            reduce using rule 2 (selection_statement -> IF LPAREN condition RPAREN statement .)


state 9

    (5) statement -> IDENTIFIER . EQUALS IDENTIFIER SEMICOLON

    EQUALS          shift and go to state 13


state 10

    (3) condition -> IDENTIFIER REL_OP IDENTIFIER .

    RPAREN          reduce using rule 3 (condition -> IDENTIFIER REL_OP IDENTIFIER .)


state 11

    (4) condition -> IDENTIFIER REL_OP NUMBER .

    RPAREN          reduce using rule 4 (condition -> IDENTIFIER REL_OP NUMBER .)


state 12

    (1) selection_statement -> IF LPAREN condition RPAREN statement ELSE . statement
    (5) statement -> . IDENTIFIER EQUALS IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 9

    statement                      shift and go to state 14

state 13

    (5) statement -> IDENTIFIER EQUALS . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 15


state 14

    (1) selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .

    $end            reduce using rule 1 (selection_statement -> IF LPAREN condition RPAREN statement ELSE statement .)


state 15

    (5) statement -> IDENTIFIER EQUALS IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 16


state 16

    (5) statement -> IDENTIFIER EQUALS IDENTIFIER SEMICOLON .

    ELSE            reduce using rule 5 (statement -> IDENTIFIER EQUALS IDENTIFIER SEMICOLON .)
    $end            reduce using rule 5 (statement -> IDENTIFIER EQUALS IDENTIFIER SEMICOLON .)

